<?php

namespace App\Http\Controllers\Receive;

use App\Http\Controllers\Controller;
use App\Models\Mall\StMall;
use App\Models\Order\StOrder;
use App\Models\Order\StOrderApply;
use App\Models\Order\StOrderTrace;
use App\Models\StApp;
use Illuminate\Http\Request;
use Mockery\CountValidator\Exception;
use Carbon\Carbon;

use App\Services\Order\OrderEditService;
use Wm;

class EleMeController extends Controller
{

    private $config;

    private $curl;

    public function __construct()
    {
        $class_name = str_replace('Controller', '', str_replace(__NAMESPACE__.'\\', '', __CLASS__));
        $this->curl = Wm::curl_client($class_name);
        $this->config = $this->curl->config;
    }

    /**
     * 消息推送统一入口
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request)
    {

        $content = $request->input();
        if (!$content) {
            return response()->json(['message'=>'ok']);
        }

        error_log('----------- ele订单推送 enter ----------');
        error_log(var_export($content, true));

        $params = json_decode($content['message'], true);

        if ($content['type'] != 10) {
            $order = StOrder::where('app_order_id', $params['orderId'])
                            ->first();
            if (!$order) {
                return ['code'=>404, 'message'=>'订单信息没有找到'];
            }
            $params['orderId'] = $order->id;
        }

        switch (true) {

            //订单生效
            case $content['type'] == 10:
                $res = $this->create($params);
                break;

            //商户接单
            case $content['type'] == 12:
                $res = $this->receive($params['orderId'], $params['role']);
                break;

            //订单被取消
            case $content['type'] == 14:
                $res = $this->cancel($params['orderId']);
                break;

            //订单被完结
            case $content['type'] == 18:
                $res = $this->status($params['orderId']);
                break;

            //用户申请取消单
            case $content['type'] == 20:
                $res = $this->apply_refund($params['orderId'], $params['reason'], 1);
                break;

            //用户取消取消单申请
            case $content['type'] == 21:
                $res = $this->cancel_apply_refund($params['orderId'], 1);
                break;

            //商品拒绝取消单
            case $content['type'] == 22:
                $res = $this->dis_agree_refund($params, 1);
                break;

            //商户同意取消单
            case $content['type'] == 23:
                $res = $this->agree_refund($params['orderId']);
                break;

            //用户申请退单
            case $content['type'] == 30:
                $res = $this->apply_refund($params['orderId'], $params['reason'], 2);
                break;

            //用户取消退单申请
            case $content['type'] == 31:
                $res = $this->cancel_apply_refund($params['orderId'], 2);
                break;

            //商户拒绝退单
            case $content['type'] == 32:
                $res = $this->dis_agree_refund($params['orderId'], 2);
                break;

            //商户同意退单
            case $content['type'] == 33:
                $res = $this->agree_refund($params['orderId']);
                break;

            //催单
            case $content['type'] == 45:
                $res = $this->remind($params['orderId'], $params['remindId']);
                break;

            //运单状态变更消息
            case in_array($content['type'], [51, 52, 53, 54, 55, 56, 58, 59, 63, 64, 65, 66, 69, 76]):
                $res = $this->waybillStatusChangePush($params, $content['type']);
                break;

            default:
                return response()->json(['message'=>'ok']);
                break;

        }

        if ($res['code'] != 200) {

        }

        return response()->json(['message'=>'ok']);

    }

    /**
     * 创建订单
     * @param $args_data
     * @return array
     */
    private function create($args_data)
    {

        if (!isset($args_data['groups'])) {
            return ['code' => 400, 'message' => '订单信息没有获取到'];
        }

        $deliveryGeo = explode(',', $args_data['deliveryGeo']);

        $send_time = '尽快送达';
        if (isset($args_data['deliverTime']) && !empty($args_data['deliverTime'])) {
            $send_time = str_replace('T', ' ', $args_data['deliverTime']);
            $send_time = date('m-d H:i', strtotime($send_time));
        }

        $order_goods = [];

        foreach ($args_data['groups'] as $group) {

            if ($group['type'] == 'extra') {
                continue;
            }

            $goods_from = $group['type'] == 'discount' ? 2 : 1;

            foreach ($group['items'] as $item) {
                $spec_name = isset($item['newSpecs'][0]['value'])
                    ? $item['newSpecs'][0]['value']
                    : '';
                $bill_goods[] = [
                    'goods_name' => $item['name'] . ' ' . $spec_name,
                    'goods_number' => $item['quantity'],
                    'goods_from' => $goods_from,
                    'price' => $item['price'],
                    'sku' => $item['extendCode']
                ];
            }
        }

        $app = StApp::where('alias', $this->config['alias'])->first();

        $order_data = [
            'operator' => 'ele-api',
            'app_id' => $app->id,
            'order_id' => $args_data['id'],
            'day_sequence' => $args_data['daySn'],
            'order_fee' => $args_data['originalPrice'],
            'user_fee' => $args_data['totalPrice'],
            'mall_fee' => $args_data['income'],
            'service_fee' => $args_data['serviceFee'],
            'mall_act_fee' => $args_data['shopPart'],
            'app_act_fee' => $args_data['elemePart'],
            'discount_fee' => $args_data['activityTotal'],
            'card_fee' => $args_data['hongbao'],
            'package_fee' => $args_data['packageFee'],
            'freight_fee' => $args_data['deliverFee'],
            'mall_code' => $args_data['openId'],
            'send_time' => $send_time,
            'deliver_lng' => $deliveryGeo[0],
            'deliver_lat' => $deliveryGeo[1],
            'deliver_name' => $args_data['consignee'],
            'deliver_mobile' => $args_data['phoneList'][0],
            'deliver_address' => $args_data['deliveryPoiAddress'],
            'deliver_fee' => $args_data['deliverFee'],
            'invoice' => 0,
            'taxer_id' => '',
            'remark' => $args_data['description'],
            'goods' => $order_goods,
            'app_order_json' => json_encode($args_data),
        ];

        if ($order_data['invoiced']) {
            $order_data['invoice'] = 1;
            $order_data['invoice_title'] = $args_data['invoice'];
            $order_data['taxer_id'] = $args_data['taxpayerId'];
        }

        $res = Wm::create_order($order_data);
        if ($res['code'] != 200) {
            return ['code' => 400, 'message' => '订单详情保存失败'];
        }

        return ['code' => 200, 'message' => 'ok'];

    }


    /**
     * 商户接单
     * @param $order_id
     * @param $role
     * @return array
     */
    private function receive($order_id, $role)
    {

        $role_array = [
            1 => '下单用户',
            2 => '饿了么系统',
            3 => '饿了么商户',
            4 => '饿了么客服',
            5 => '饿了么开放平台系统',
            6 => '饿了么短信系统',
            7 => '饿了么无线打印机系统',
            8 => '饿了么风控系统',
            9 => '饿了么订单完结'
        ];

        $opreator = isset($role_array[$role])
            ? $role_array[$role]
            : 'ele-push';

        $order_edit = new OrderEditService();
        $order_result = $order_edit->receive($order_id, $opreator, 0);
        return $order_result;

    }


    /**
     * 订单被取消
     * @param $order_id
     * @return array
     */
    private function cancel($order_id)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->cancel($order_id, 'push', '平台推送取消接口', 'ele-push', 0);
        return $order_result;

    }


    /**
     * 订单被完结
     * @param $order_id
     * @return array|mixed
     */
    private function status($order_id)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->complete($order_id, 'ele-push', 0);
        return $order_result;

    }


    /**
     * 用户申请取消单/退单
     * @param $order_id
     * @param $reason
     * @param $type
     * @return array
     */
    private function apply_refund($order_id, $reason, $type)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->applyRefund($order_id, 'ele-push', $reason, $type);
        return $order_result;

    }


    /**
     * 用户取消取消单/退单申请
     * @param $order_id
     * @param $type
     * @return array
     */
    private function cancel_apply_refund($order_id, $type)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->cancelApplyRefund($order_id, 'ele-push', $type);
        return $order_result;

    }


    /**
     * 商户同意取消单/退单
     * @param $order_id
     * @return array
     */
    private function agree_refund($order_id)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->agreeRefund($order_id, 'ele-push');
        return $order_result;

    }


    /**
     * 商户拒绝取消单/退单
     * @param $order_id
     * @param $apply_type
     * @return array
     */
    private function dis_agree_refund($order_id, $apply_type)
    {

        $reply_message = $apply_type == 1
            ? '平台推送拒绝取消单'
            : '平台推送拒绝退单';

        $order_edit = new OrderEditService();
        $order_result = $order_edit->disagreeRefund($order_id, $reply_message, 'ele-push');
        return $order_result;

    }


    /**
     * 用户催单
     * @param $order_id
     * @param $remind_id
     * @return array
     */
    private function remind($order_id, $remind_id)
    {

        $order_edit = new OrderEditService();
        $order_result = $order_edit->applyRemind($order_id, $remind_id, 'ele-push');
        return $order_result;

    }

    
    /**
     * 运单状态变更
     * @param $args_data
     * @param $type
     * @return array
     */
    private function waybillStatusChangePush($args_data, $type)
    {

        if (!isset($args_data['orderId']) || empty($args_data['orderId'])) {
            return ['code' => 400, 'message' => '缺少必要参数：orderId'];
        }

        //实例化订单类
        $st_order = StOrder::where('o_order_id', $args_data['orderId'])->first();
        if (!$st_order) {
            return ['code' => 404, 'message' => '外卖订单信息没有找到'];
        }

        $open_allot = ConfigureFunction::getConfigureField(21, 'open_allot');
        $bill_status = $open_allot == 1 ? 2 : 7; //订单状态：开启配货流程为2，不开启为7

        $content_map = [
            51 => [1, '订单待分配配送商'],
            52 => [2, '订单待分配配送员'],
            53 => [3, '已分配给配送员，配送员取餐中'],
            54 => [3, '配送员已经到店'],
            55 => [4, '配送员已取餐，配送中'],
            56 => [5, '配送成功'],
            58 => [6, '配送取消，用户取消', 'hang_up'],
            59 => [6, '配送取消，物流系统取消', 'hang_up'],
            63 => [7, '配送失败，用户不接电话', 'hang_up'],
            64 => [7, '配送失败，用户退单', 'hang_up'],
            65 => [7, '配送失败，用户地址错误', 'hang_up'],
            66 => [7, '配送失败，超出服务范围', 'hang_up'],
            69 => [7, '配送失败，其他异常', 'hang_up'],
            76 => [7, '配送失败，其他异常', 'hang_up']
        ];

        if (isset($content_map[$type])) {

            $distribution_data = [
                'bill_no' => $st_order->bill_no,
                'operator' => 'system',
                'bill_status' => $bill_status,
                'logistics_status' => $content_map[$type][0],
                'content' => $content_map[$type][1]
            ];
            if ($type == 53) {
                $distribution_data['name'] = isset($args_data['name']) ? $args_data['name'] : '';
                $distribution_data['phone'] = isset($args_data['phone']) ? $args_data['phone'] : '';
            }

            $request_data = [
                'bill_no' => $st_order->bill_no,
                'operator' => 'ele-push',
            ];

            //如果开启配货流程，平台配送触发发货流程
            if ($type == 55 && $open_allot == 1) {
                $deliver = WdhService::deliverGoods($request_data);
                if ($deliver['code'] != 200) {
                    return $deliver;
                }
            }

            //记录订单轨迹并更新物流状态

            $st_trace = new StOrderTrace();
            $st_trace->updated_at = Carbon::now();
            $st_trace->creator = 'ele-push';
            $st_trace->created_at = Carbon::now();
            $st_trace->order_id = $st_order->id;
            $st_trace->order_status = $bill_status;
            $st_trace->content = $distribution_data['content'];

            try {
                //开启事务
                DB::beginTransaction();
                $st_trace->save();

                Bill::where('bill_no', $st_order->bill_no)->update(['express_company' => $distribution_data['name'],
                    'express_number' => $distribution_data['phone']]);

                //配送失败和异常的订单进行挂起成异常订单
                if (isset($content_map[$type][2])) {
                    Bill::where('bill_no', $st_order->bill_no)->update(['hang_up' => 1]);
                }

            } catch (Exception $e) {
                DB::rollback();//事务回滚
                echo $e->getMessage();
                echo $e->getCode();
            }

        }

        return ['code' => 200, 'message' => 'ok'];

    }

    /**
     * 授权回调
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function callback(Request $request)
    {

        $code = $request->input('code');

        if (empty($code)) {
            return response()->json(['code'=>400, 'message'=>'缺少参数：code']);
        }

        return $this->curl->get_access_token($code);

    }

}